import { IFullStackStack } from "@/data/fullstack/model/IFullStackStack";
import { ImageUrl } from "@/image/ImageUrl";

export const JavaTH: IFullStackStack = {
    title: "การพัฒนา Java",
    description:
        "Java เป็นภาษาโปรแกรมที่แข็งแกร่งและหลากหลาย เหมาะสำหรับแอปพลิเคชันระดับองค์กรและคลาวด์ยุคใหม่ ด้วยเฟรมเวิร์กอย่าง Spring Boot เทคโนโลยีอย่าง gRPC และเครื่องมือที่รองรับระบบเดิมอย่าง RMI Java ยังคงเป็นรากฐานที่มั่นคงสำหรับโซลูชันแบบฟูลสแตกที่สามารถขยายตัวได้",
    image: ImageUrl.backend.frameworks.java.thumbnail,
    alt: "การพัฒนา Java, Spring Boot, gRPC และ RMI",
    readMore: "สำรวจการพัฒนาแบบฟูลสแตกด้วย Java และ Spring Boot",
    link: "/technical-expertise/full-stack-developer/java-spring-boot-developer",
    features: [
        {
            title: "การพัฒนา Java ยุคใหม่",
            description:
                "Java ยังคงพัฒนาอย่างต่อเนื่องด้วยฟีเจอร์ใหม่ เช่น records, pattern matching และ virtual threads ซึ่งช่วยเพิ่มประสิทธิภาพและความสะดวกในการพัฒนาแอปพลิเคชันแบบฟูลสแตก",
            list: [
                "รองรับ Java 17+ LTS",
                "ปรับปรุงประสิทธิภาพด้วย virtual threads",
                "ความปลอดภัยของชนิดข้อมูล (type safety)",
                "ใช้งานแพร่หลายในระบบไมโครเซอร์วิสและองค์กร"
            ]
        },
        {
            title: "Spring Boot และแอปพลิเคชันบนคลาวด์",
            description:
                "Spring Boot ช่วยให้การพัฒนาแอปพลิเคชันเป็นเรื่องง่าย ด้วยการกำหนดค่าล่วงหน้าและการรวมระบบกับคลาวด์ รองรับการสร้าง REST API, ไมโครเซอร์วิส และโซลูชันแบบฟูลสแตกได้อย่างรวดเร็ว",
            list: [
                "กำหนดค่าอัตโนมัติและจัดการ dependency ได้ง่าย",
                "สถาปัตยกรรมพร้อมใช้งานกับไมโครเซอร์วิส",
                "รองรับ RESTful API และ WebSocket",
                "รองรับการใช้งานบนคลาวด์ผ่าน Spring Cloud"
            ]
        },
        {
            title: "การสื่อสารระหว่างเซอร์วิสด้วย gRPC และ RMI",
            description:
                "สำหรับการสื่อสารระหว่างเซอร์วิสที่มีประสิทธิภาพและรองรับหลายภาษา Java รองรับการใช้งาน gRPC ในขณะที่ RMI ยังคงเป็นทางเลือกที่เชื่อถือได้สำหรับการเชื่อมต่อระบบเดิมแบบ Java-to-Java",
            list: [
                "สื่อสารข้อมูลแบบ binary ด้วย gRPC อย่างมีประสิทธิภาพ",
                "รองรับระบบเดิมด้วย RMI",
                "การเข้าถึงจากระยะไกลอย่างปลอดภัยและควบคุมได้",
                "ผสมผสานระบบใหม่และระบบเดิมเข้าด้วยกันได้อย่างลงตัว"
            ]
        },
        {
            title: "ระบบระดับองค์กรและการปรับปรุง Java EE",
            description:
                "แม้ว่า Java EE จะเป็นรากฐานของแอปพลิเคชันองค์กร แต่เฟรมเวิร์กยุคใหม่อย่าง Jakarta EE และ Spring ได้เข้ามาช่วยยกระดับระบบให้ทันสมัยขึ้น ทั้งในด้านโมดูลาร์ ประสิทธิภาพ และความสามารถในการทำงานบนคลาวด์ โดยยังคงรองรับระบบเดิมได้",
            list: [
                "Jakarta EE คือวิวัฒนาการของ Java EE",
                "รองรับการ deploy ด้วย Docker และ Kubernetes",
                "โครงสร้างระบบที่ปลอดภัยในระดับองค์กร",
                "รองรับระบบเดิมผ่าน API สมัยใหม่"
            ]
        }
    ],
    faqs: [
        {
            question: "Spring Boot คืออะไร?",
            answer:
                "Spring Boot คือเฟรมเวิร์กที่ช่วยให้สร้างแอปพลิเคชันแบบ Standalone และพร้อมใช้งานในระดับ Production ได้อย่างง่ายดาย ด้วยการตั้งค่าอัตโนมัติ การจัดการ Dependency และเซิร์ฟเวอร์ในตัว"
        },
        {
            question: "Java รองรับระบบใหม่และระบบเดิมอย่างไร?",
            answer:
                "Java รองรับการพัฒนาระบบยุคใหม่ผ่าน Spring Boot และ gRPC พร้อมทั้งยังคงสามารถใช้งานร่วมกับระบบเดิมอย่าง RMI และ J2EE ได้อย่างมีประสิทธิภาพ จึงเหมาะสำหรับระบบในองค์กรที่ต้องการทั้งความทันสมัยและความต่อเนื่อง"
        },
        {
            question: "gRPC คืออะไร และใช้งานใน Java อย่างไร?",
            answer:
                "gRPC คือเฟรมเวิร์ก RPC ที่มีประสิทธิภาพสูงและรองรับหลายภาษา ใช้ในการสื่อสารระหว่างเซอร์วิสในสถาปัตยกรรมไมโครเซอร์วิส โดยใช้ Protocol Buffers เพื่อจัดการข้อมูลแบบ binary อย่างมีประสิทธิภาพ"
        }
    ]
};